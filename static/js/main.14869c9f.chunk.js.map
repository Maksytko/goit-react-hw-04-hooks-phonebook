{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Contact/Contact.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","contacts","addToContactList","useState","name","setName","number","setNumber","handleInputChange","event","currentTarget","value","onSubmit","preventDefault","className","style","label","input","type","pattern","title","required","onChange","Filter","onChangeFilterInput","Contact","contact","deleteContactFromList","item","id","onClick","ContactList","list","map","App","setContacts","filter","setFilter","useEffect","contactsFromStorage","JSON","parse","localStorage","getItem","length","setItem","stringify","console","log","filterContactsByName","useMemo","toUpperCase","includes","nameForCheck","find","alert","uuidv","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14869c9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__2dE5Z\",\"input\":\"ContactForm_input__SICoa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Contact_item__3hpoS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3J6yK\"};","import { useState } from \"react\";\nimport propTypes from \"prop-types\";\nimport style from \"./ContactForm.module.css\";\n\nfunction ContactForm ({contacts, addToContactList}) {\n  const [name, setName] = useState(\"\")\n  const [number, setNumber] = useState(\"\")\n\n  function handleFormSubmit (event) {\n    event.preventDefault();\n\n    setName(\"\")\n    setNumber(\"\")\n    addToContactList(name, number);\n  };\n\n  function handleInputChange (event) {\n    if (event.currentTarget.name === \"name\") {\n      return setName(event.currentTarget.value)\n    }\n\n    setNumber(event.currentTarget.value)\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <label className={style.label}>\n        <span>Name</span>\n        <input\n          className={style.input}\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleInputChange}\n        />\n      </label>\n      <label className={style.label}>\n        <span>Number</span>\n        <input\n          className={style.input}\n          type=\"tel\"\n          value={number}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleInputChange}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.shape({\n      name: propTypes.string,\n      number: propTypes.string,\n    })\n  ),\n  addToContactList: propTypes.func,\n};\n\nexport default ContactForm;\n","import propTypes from \"prop-types\";\n\nfunction Filter({ onChangeFilterInput }) {\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input type=\"text\" onChange={onChangeFilterInput}></input>\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  onChangeFilterInput: propTypes.func,\n};\n\nexport default Filter;\n","import propTypes from \"prop-types\";\nimport style from \"./Contact.module.css\";\n\nfunction Contact({ contact, deleteContactFromList }) {\n  return (\n    <li className={style.item}>\n      {contact.name}: {contact.number}\n      <button type=\"button\" id={contact.id} onClick={deleteContactFromList}>\n        Удалить\n      </button>\n    </li>\n  );\n}\n\nContact.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.shape({\n      name: propTypes.string,\n      number: propTypes.string,\n    })\n  ),\n  deleteContactFromList: propTypes.func,\n};\n\nexport default Contact;\n","import Contact from \"../Contact/Contact\";\nimport propTypes from \"prop-types\";\nimport style from \"./ContactList.module.css\";\n\nfunction ContactList({ contacts, deleteContactFromList }) {\n  return (\n    <ul className={style.list}>\n      {contacts.map((contact) => {\n        return (\n          <Contact\n            contact={contact}\n            key={contact.id}\n            deleteContactFromList={deleteContactFromList}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.shape({\n      name: propTypes.string,\n      number: propTypes.string,\n    })\n  ),\n  deleteContactFromList: propTypes.func,\n};\n\nexport default ContactList;\n","import \"./App.css\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport { v4 as uuidv } from \"uuid\";\n\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    const contactsFromStorage = JSON.parse(localStorage.getItem(\"contacts\"));\n    if (contactsFromStorage.length !== 0) {\n      setContacts(contactsFromStorage);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n    console.log(\"boom1\");\n  }, [contacts]);\n\n  function addToContactList(nameForCheck, number) {\n    if (\n      contacts.find((contact) => {\n        return contact.name === nameForCheck;\n      })\n    ) {\n      return alert(`${nameForCheck} is already in contacts!`);\n    }\n\n    return setContacts([\n      ...contacts,\n      {\n        id: uuidv(),\n        name: nameForCheck,\n        number: number,\n      },\n    ]);\n  }\n\n  function handleInputFilterChange(event) {\n    setFilter(event.currentTarget.value);\n  }\n\n  const filterContactsByName = useMemo(() => {\n    return contacts.filter((contact) =>\n      contact.name.toUpperCase().includes(filter.toUpperCase())\n    );\n  }, [contacts, filter]);\n\n  function deleteContactFromList(event) {\n    setContacts(contacts.filter((contact) => contact.id !== event.target.id));\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm contacts={contacts} addToContactList={addToContactList} />\n      <h2>Contacts</h2>\n      <Filter onChangeFilterInput={handleInputFilterChange} />\n      <ContactList\n        contacts={filterContactsByName}\n        deleteContactFromList={deleteContactFromList}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}